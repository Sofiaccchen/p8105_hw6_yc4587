) %>%
select(name, id, everything())
install.packages("rnoaa")
install.packages("broom")
install.packages("dplyr")
library(rnoaa)
library(broom)
library(dplyr)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
install.packages("rnoaa")
install.packages("broom")
install.packages("dplyr")
library(rnoaa)
library(broom)
library(dplyr)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
install.packages("rnoaa")
install.packages("broom")
install.packages("dplyr")
library(rnoaa)
library(broom)
library(dplyr)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
install.packages("broom")
install.packages("dplyr")
# 安装最新 rnoaa
install.packages("remotes")
remotes::install_github("ropensci/rnoaa")
# 加载包
library(rnoaa)
library(dplyr)
library(broom)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
install.packages("broom")
install.packages("dplyr")
# 安装最新 rnoaa
install.packages("remotes")
remotes::install_github("ropensci/rnoaa")
# 加载包
library(rnoaa)
library(dplyr)
library(broom)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(rsample)
install.packages("broom")
install.packages("dplyr")
install.packages("remotes")
remotes::install_github("ropensci/rnoaa")
library(rnoaa)
library(dplyr)
library(broom)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
if (!require(rsample)) install.packages("rsample")
library(rsample)
# Pull the weather data for 2017
devtools::install_github("ropensci/rnoaa")
library(rnoaa)
weather_df <- rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31"
) %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10
) %>%
select(name, id, everything())
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load the data
homicide_data <- read_excel("homicide-data.xlsx")
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load the data
homicide_data <- read_excel("homicide-data.xlsx")
# Clean and prepare the data
cleaned_data <- homicide_data %>%
mutate(
city_state = paste(city, state, sep = ", "),
solved_binary = ifelse(disposition == "Closed by arrest", 1, 0),
victim_age = as.numeric(victim_age)
) %>%
filter(
!city_state %in% c("Dallas, TX", "Phoenix, AZ", "Kansas City, MO", "Tulsa, AL"),
victim_race %in% c("White", "Black"),
!is.na(victim_age)
)
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load the data
homicide_data <- read_excel("homicide-data.xlsx")
# Clean and prepare the data
cleaned_data <- homicide_data %>%
mutate(
city_state = paste(city, state, sep = ", "),
solved_binary = ifelse(disposition == "Closed by arrest", 1, 0),
victim_age = as.numeric(victim_age)
) %>%
filter(
!city_state %in% c("Dallas, TX", "Phoenix, AZ", "Kansas City, MO", "Tulsa, AL"),
victim_race %in% c("White", "Black"),
!is.na(victim_age)
)
# Subset for Baltimore, MD
baltimore_data <- cleaned_data %>%
filter(city_state == "Baltimore, MD")
# Fit logistic regression model
baltimore_glm <- glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = baltimore_data
)
# Tidy the model output
baltimore_tidy <- broom::tidy(baltimore_glm, exponentiate = TRUE, conf.int = TRUE)
# Extract adjusted odds ratio for male vs female
adjusted_or_baltimore <- baltimore_tidy %>%
filter(term == "victim_sexMale") %>%
select(estimate, conf.low, conf.high)
adjusted_or_baltimore
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load the data
homicide_data <- read_excel("homicide-data.xlsx")
# Clean and prepare the data
cleaned_data <- homicide_data %>%
mutate(
city_state = paste(city, state, sep = ", "),
solved_binary = ifelse(disposition == "Closed by arrest", 1, 0),
victim_age = as.numeric(victim_age)
) %>%
filter(
!city_state %in% c("Dallas, TX", "Phoenix, AZ", "Kansas City, MO", "Tulsa, AL"),
victim_race %in% c("White", "Black"),
!is.na(victim_age)
)
# Subset for Baltimore, MD
baltimore_data <- cleaned_data %>%
filter(city_state == "Baltimore, MD")
# Fit logistic regression model
baltimore_glm <- glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = baltimore_data
)
# Tidy the model output
baltimore_tidy <- broom::tidy(baltimore_glm, exponentiate = TRUE, conf.int = TRUE)
# Extract adjusted odds ratio for male vs female
adjusted_or_baltimore <- baltimore_tidy %>%
filter(term == "victim_sexMale") %>%
select(estimate, conf.low, conf.high)
adjusted_or_baltimore
# Fit logistic regression for each city
citywise_results <- cleaned_data %>%
group_by(city_state) %>%
nest() %>%
mutate(
glm_model = map(data, ~ glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = .x
)),
tidy_model = map(glm_model, ~ broom::tidy(.x, exponentiate = TRUE, conf.int = TRUE))
) %>%
unnest(tidy_model) %>%
filter(term == "victim_sexMale") %>%
select(city_state, estimate, conf.low, conf.high)
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
# Load the data
homicide_data <- read_excel("homicide-data.xlsx")
# Clean and prepare the data
cleaned_data <- homicide_data %>%
mutate(
city_state = paste(city, state, sep = ", "),
solved_binary = ifelse(disposition == "Closed by arrest", 1, 0),
victim_age = as.numeric(victim_age)
) %>%
filter(
!city_state %in% c("Dallas, TX", "Phoenix, AZ", "Kansas City, MO", "Tulsa, AL"),
victim_race %in% c("White", "Black"),
!is.na(victim_age)
)
# Subset for Baltimore, MD
baltimore_data <- cleaned_data %>%
filter(city_state == "Baltimore, MD")
# Fit logistic regression model
baltimore_glm <- glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = baltimore_data
)
# Tidy the model output
baltimore_tidy <- broom::tidy(baltimore_glm, exponentiate = TRUE, conf.int = TRUE)
# Extract adjusted odds ratio for male vs female
adjusted_or_baltimore <- baltimore_tidy %>%
filter(term == "victim_sexMale") %>%
select(estimate, conf.low, conf.high)
adjusted_or_baltimore
# Fit logistic regression for each city
citywise_results <- cleaned_data %>%
group_by(city_state) %>%
nest() %>%
mutate(
glm_model = map(data, ~ glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = .x
)),
tidy_model = map(glm_model, ~ broom::tidy(.x, exponentiate = TRUE, conf.int = TRUE))
) %>%
unnest(tidy_model) %>%
filter(term == "victim_sexMale") %>%
select(city_state, estimate, conf.low, conf.high)
# Plot ORs for each city
citywise_results <- citywise_results %>%
arrange(estimate)
ggplot(citywise_results, aes(x = reorder(city_state, estimate), y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
coord_flip() +
labs(
title = "Adjusted Odds Ratios by City",
x = "City",
y = "Adjusted Odds Ratio (Male vs Female)"
) +
theme_minimal()
# Load required libraries
library(readxl)
library(dplyr)
library(broom)
library(purrr)
library(ggplot2)
homicide_data <- read_excel("homicide-data.xlsx")
# Clean and prepare the data
cleaned_data <- homicide_data %>%
mutate(
city_state = paste(city, state, sep = ", "),
solved_binary = ifelse(disposition == "Closed by arrest", 1, 0),
victim_age = as.numeric(victim_age)
) %>%
filter(
!city_state %in% c("Dallas, TX", "Phoenix, AZ", "Kansas City, MO", "Tulsa, AL"),
victim_race %in% c("White", "Black"),
!is.na(victim_age)
)
baltimore_data <- cleaned_data %>%
filter(city_state == "Baltimore, MD")
baltimore_glm <- glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = baltimore_data
)
baltimore_tidy <- broom::tidy(baltimore_glm, exponentiate = TRUE, conf.int = TRUE)
# Extract adjusted odds ratio for male vs female
adjusted_or_baltimore <- baltimore_tidy %>%
filter(term == "victim_sexMale") %>%
select(estimate, conf.low, conf.high)
adjusted_or_baltimore
citywise_results <- cleaned_data %>%
group_by(city_state) %>%
nest() %>%
mutate(
glm_model = map(data, ~ glm(
solved_binary ~ victim_age + victim_sex + victim_race,
family = binomial(),
data = .x
)),
tidy_model = map(glm_model, ~ broom::tidy(.x, exponentiate = TRUE, conf.int = TRUE))
) %>%
unnest(tidy_model) %>%
filter(term == "victim_sexMale") %>%
select(city_state, estimate, conf.low, conf.high)
citywise_results <- citywise_results %>%
arrange(estimate)
ggplot(citywise_results, aes(x = reorder(city_state, estimate), y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
coord_flip() +
labs(
title = "Adjusted Odds Ratios by City",
x = "City",
y = "Adjusted Odds Ratio (Male vs Female)"
) +
theme_minimal()
# Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
library(tidymodels)
install.packages("tidymodels")
# Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
library(tidymodels)
library(modelr)
library(purrr)
# Load the dataset
birthweight_data <- read_excel("birthweight.xlsx")
# Inspect the data structure
str(birthweight_data)
# Clean and process the data
birthweight_clean <- birthweight_data %>%
mutate(
babysex = factor(babysex, labels = c("Male", "Female")),
frace = factor(frace),
mrace = factor(mrace),
malform = factor(malform),
smoked = as.numeric(smoken), # Convert smoking variable if needed
bwt = as.numeric(bwt) # Ensure birthweight is numeric
) %>%
drop_na() # Drop rows with missing values
# Fit the hypothesized regression model
hypothesized_model <- lm(bwt ~ babysex + bhead + blength + fincome + smoked + wtgain, data = birthweight_clean)
# Summary of the model
summary(hypothesized_model)
# Add predictions and residuals
birthweight_clean <- birthweight_clean %>%
add_predictions(hypothesized_model, var = "predicted_bwt") %>%
add_residuals(hypothesized_model, var = "residuals")
ggplot(birthweight_clean, aes(x = predicted_bwt, y = residuals)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(
title = "Residuals vs Fitted Values",
x = "Fitted Birthweight",
y = "Residuals"
) +
theme_minimal()
# Fit model with length and gestational age as predictors
model_2 <- lm(bwt ~ blength + gaweeks, data = birthweight_clean)
# Summary of Model 2
summary(model_2)
# Fit model with head circumference, length, sex, and interactions
model_3 <- lm(bwt ~ bhead * blength * babysex, data = birthweight_clean)
# Summary of Model 3
summary(model_3)
# Define cross-validation folds
set.seed(123)
cv_folds <- vfold_cv(birthweight_clean, v = 5)
# Define a function to calculate RMSE for a model
calculate_rmse <- function(model, data) {
rmse <- sqrt(mean(residuals(model)^2))
return(rmse)
}
# Compute RMSE for each model
rmse_hypothesized <- calculate_rmse(hypothesized_model, birthweight_clean)
rmse_model_2 <- calculate_rmse(model_2, birthweight_clean)
rmse_model_3 <- calculate_rmse(model_3, birthweight_clean)
# Output RMSE results
data.frame(
Model = c("Hypothesized Model", "Model 2", "Model 3"),
RMSE = c(rmse_hypothesized, rmse_model_2, rmse_model_3)
)
# Prepare data for plotting
comparison_results <- data.frame(
Model = c("Hypothesized Model", "Model 2", "Model 3"),
RMSE = c(rmse_hypothesized, rmse_model_2, rmse_model_3)
)
# Plot RMSE comparison
ggplot(comparison_results, aes(x = Model, y = RMSE, fill = Model)) +
geom_bar(stat = "identity", alpha = 0.7) +
labs(
title = "Model RMSE Comparison",
x = "Model",
y = "RMSE"
) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rnoaa)
library(broom)
weather_df =
rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31") %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10) %>%
select(name, id, everything())
weather_df =
rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31") %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10) %>%
select(name, id, everything())
weather_df =
rnoaa::meteo_pull_monitors(
c("USW00094728"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2017-01-01",
date_max = "2017-12-31") %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY"),
tmin = tmin / 10,
tmax = tmax / 10) %>%
select(name, id, everything())
